let length = define
  `length [] = 0 /\
   length (CONS h t) = 1 + length t`;;

let cat = define
  `cat [] b = b /\
   cat (CONS h t) b = CONS h (cat t b)`;;

let cat0 = prove
  (`!a. cat a [] = a`,
   LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[cat]);;

let length_cat = prove
  (`!a b. length (cat a b) = length a + length b`,
   REPEAT LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[cat; length] THEN ARITH_TAC);;

let insert = define
  `insert x [] = [x] /\
   insert x (CONS h t) = if x <= h then CONS x (CONS h t) else CONS h (insert x t)`;;

let ins_sort = define
  `ins_sort [] = [] /\
   ins_sort (CONS h t) = insert h (ins_sort t)`;;

let tm = `ins_sort [3; 1; 5]`;;

REWRITE_CONV[ins_sort] tm;;
REWRITE_CONV[ins_sort; insert] tm;;
REWRITE_CONV[ins_sort; insert; ARITH] tm;;

let length_insert = prove
  (`!x s. length (insert x s) = 1 + length s`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[length; insert] THEN
     COND_CASES_TAC THEN ASM_REWRITE_TAC[length]);;

let length_ins_sort = prove
  (`!s. length (ins_sort s) = length s`,
   LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[ins_sort; length_insert; length]);;

let mem = define
  `mem x [] = F /\
   mem x (CONS h t) = if x = h then T else mem x t`;;

let mem_cat = prove
  (`!x a b. mem x (cat a b) <=> mem x a \/ mem x b`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[mem; cat] THEN
     COND_CASES_TAC THEN ASM_REWRITE_TAC[]);;

let ordered = define
  `ordered [] = T /\
   ordered (CONS h t) = (ordered t /\ (!x. mem x t ==> h <= x))`;;

let mem_insert = prove
  (`!s x y. mem y (insert x s) <=> y = x \/ mem y s`,
   LIST_INDUCT_TAC THEN REWRITE_TAC[insert; mem] THEN REPEAT STRIP_TAC THEN
     REPEAT (COND_CASES_TAC THEN ASM_REWRITE_TAC[mem]));;

let ordered_insert = prove
  (`!x s. ordered s ==> ordered (insert x s)`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[insert; ordered; mem] THEN
     STRIP_TAC THEN COND_CASES_TAC THENL [
       ASM_REWRITE_TAC[ordered; mem] THEN GEN_TAC THEN
	 COND_CASES_TAC THEN REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[] THEN
	 MATCH_MP_TAC LE_TRANS THEN EXISTS_TAC `h:num` THEN
	 ASM_SIMP_TAC[];
       ALL_TAC
     ] THEN
     ASM_SIMP_TAC[ordered; mem_insert] THEN
     REPEAT STRIP_TAC THENL [
       ASM_ARITH_TAC;
       FIRST_X_ASSUM MATCH_MP_TAC THEN ASM_REWRITE_TAC[]
     ]);;
     
let ordered_ins_sort = prove
  (`!s. ordered (ins_sort s)`,
   LIST_INDUCT_TAC THEN REWRITE_TAC[ins_sort; ordered] THEN
     ASM_SIMP_TAC[ordered_insert]);;

let count = define
  `count (y:A) [] = 0 /\
   count y (CONS h t) = (if y = h then 1 else 0) + count y t`;;

let count_cat = prove
  (`!a b x. count x (cat a b) = count x a + count x b`,
   REPEAT LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[count; cat] THEN ARITH_TAC);;

let perm = new_definition
  `!a b. perm a b <=> (!x. count x a = count x b)`;;

let count_insert = prove
  (`!x y s. count y (insert x s) = (if y = x then 1 else 0) + count y s`,
   GEN_TAC THEN GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[insert; count] THEN
     REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[count] THEN ASM_ARITH_TAC);;

let count_ins_sort = prove
  (`!y s. count y (ins_sort s) = count y s`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[ins_sort; count_insert; count]);;

let perm_ins_sort = prove
  (`!s. perm (ins_sort s) s`,
   REWRITE_TAC[perm; count_ins_sort]);;


let sorted = define
  `sorted [] = T /\
   sorted [h] = T /\
   sorted (CONS h1 (CONS h2 t)) = (h1 <= h2 /\ sorted (CONS h2 t))`;;

let sorted_cons = prove
  (`!t h. sorted (CONS h t) <=> 
     (sorted t /\ (!x. MEM x t ==> h <= x))`,
   LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[sorted; MEM] THEN
     MESON_TAC[LE_TRANS]);;
	 



let perm_sym = prove
  (`!a b. perm a b <=> perm b a`,
   REWRITE_TAC[perm; EQ_SYM_EQ]);;

let perm_trans = prove
  (`!a b c. perm a b /\ perm b c ==> perm a c`,
   MESON_TAC[perm]);;

let perm_nil = prove
  (`!s:(A)list. perm s [] <=> s = []`,
   LIST_INDUCT_TAC THEN REWRITE_TAC[perm; count; NOT_CONS_NIL; NOT_FORALL_THM] THEN
     EXISTS_TAC `h:A` THEN ARITH_TAC);;

let perm_nil2 = prove
  (`!s:(A)list. perm [] s <=> s = []`,
   ONCE_REWRITE_TAC[perm_sym] THEN REWRITE_TAC[perm_nil]);;

let delete1 = define
  `delete1 y [] = [] /\
   delete1 y (CONS h t) = if y = h then t else CONS h (delete1 y t)`;;

let delete1_same = prove
  (`!(x:A) s. ~(MEM x s) ==> delete1 x s = s`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[MEM; delete1] THEN
     REWRITE_TAC[DE_MORGAN_THM] THEN STRIP_TAC THEN ASM_SIMP_TAC[]);;

let count_delete1 = prove
  (`!(x:A) y s. count y (delete1 x s) = 
      count y s - if MEM x s /\ x = y then 1 else 0`,
   GEN_TAC THEN GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[delete1; count; MEM; ARITH] THEN
     REPEAT (COND_CASES_TAC THEN ASM_REWRITE_TAC[count]) THEN ARITH_TAC);;

let mem_count_gt = prove
  (`!(x:A) s. MEM x s <=> 0 < count x s`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[MEM; count; LT] THEN
     ARITH_TAC);;

let mem_count = prove
  (`!(x:A) s. MEM x s ==> count x s = 1 + count x (delete1 x s)`,
   REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[count_delete1] THEN
     POP_ASSUM MP_TAC THEN REWRITE_TAC[mem_count_gt] THEN ARITH_TAC);;

let mem_perm = prove
  (`!a b. perm a b ==> (!x:A. MEM x a <=> MEM x b)`,
   REWRITE_TAC[perm; mem_count_gt] THEN
     REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[]);;

let perm_delete1 = prove
  (`!(x:A) a b. perm a b ==> perm (delete1 x a) (delete1 x b)`,
   REPEAT STRIP_TAC THEN FIRST_ASSUM MP_TAC THEN
     REWRITE_TAC[perm; count_delete1] THEN REPEAT STRIP_TAC THEN
     FIRST_X_ASSUM (ASSUME_TAC o MATCH_MP mem_perm) THEN
     ASM_REWRITE_TAC[]);;

let delete1_cons = prove
  (`!h t. delete1 h (CONS h t) = t`,
   REWRITE_TAC[delete1]);;

let list_wf_ind = REWRITE_RULE[WF_IND; MEASURE] (ISPEC `LENGTH` WF_MEASURE);;

let length_delete1_eq = prove
  (`!(x:A) s. length (delete1 x s) + (if MEM x s then 1 else 0) = length s`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[length; MEM; delete1; ARITH] THEN
     REPEAT (COND_CASES_TAC THEN ASM_REWRITE_TAC[length]) THEN TRY ASM_ARITH_TAC THEN
     REPEAT (POP_ASSUM MP_TAC) THEN DISCH_THEN (LABEL_TAC "h") THEN REPEAT STRIP_TAC THEN
     REMOVE_THEN "h" MP_TAC THEN ASM_REWRITE_TAC[] THEN ARITH_TAC);;

let delete1_ind = prove
  (`!P. P [] /\ (!(x:A) s. MEM x s /\ P (delete1 x s) ==> P s) ==> (!s. P s)`,
   GEN_TAC THEN STRIP_TAC THEN
     MATCH_MP_TAC list_wf_ind THEN REPEAT STRIP_TAC THEN
     DISJ_CASES_TAC (ISPEC `s:(A)list` list_CASES) THEN ASM_REWRITE_TAC[] THEN
     POP_ASSUM STRIP_ASSUME_TAC THEN ASM_REWRITE_TAC[] THEN
     FIRST_X_ASSUM (MATCH_MP_TAC o SPEC `h:A`) THEN
     REWRITE_TAC[MEM; delete1] THEN FIRST_X_ASSUM MATCH_MP_TAC THEN
     ASM_REWRITE_TAC[LENGTH] THEN ARITH_TAC);;

let perm_length = prove
  (`!a b:(A)list. perm a b ==> length a = length b`,
   MATCH_MP_TAC delete1_ind THEN REPEAT STRIP_TAC THENL [
     POP_ASSUM MP_TAC THEN SIMP_TAC[perm_nil2];
     ALL_TAC
   ] THEN
     FIRST_X_ASSUM (MP_TAC o SPEC `delete1 (x:A) b`) THEN
     ASM_SIMP_TAC[perm_delete1] THEN DISCH_TAC THEN
     ONCE_REWRITE_TAC[GSYM length_delete1_eq] THEN
     FIRST_X_ASSUM (ASSUME_TAC o GSYM o MATCH_MP mem_perm) THEN
     ASM_REWRITE_TAC[]);;

let mem_delete1 = prove
  (`!x:A y s. MEM y (delete1 x s) ==> MEM y s`,
   GEN_TAC THEN GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[MEM; delete1] THEN
     COND_CASES_TAC THEN SIMP_TAC[MEM] THEN
     STRIP_TAC THEN ASM_SIMP_TAC[]);;

let sorted_delete1 = prove
  (`!x s. sorted s ==> sorted (delete1 x s)`,
   GEN_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[delete1] THEN
     COND_CASES_TAC THEN ASM_SIMP_TAC[sorted_cons] THEN REPEAT STRIP_TAC THEN
     FIRST_X_ASSUM MATCH_MP_TAC THEN
     MATCH_MP_TAC mem_delete1 THEN EXISTS_TAC `x:num` THEN
     ASM_REWRITE_TAC[]);;

let sorted_perm_uniq = prove
  (`!a b. sorted a /\ sorted b /\ perm a b ==> a = b`,
   MATCH_MP_TAC delete1_ind THEN REPEAT STRIP_TAC THENL [
     POP_ASSUM MP_TAC THEN SIMP_TAC[perm_nil2];
     ALL_TAC
   ] THEN
     FIRST_X_ASSUM (MP_TAC o SPEC `delete1 (x:num) b`) THEN

   LIST_INDUCT_TAC THEN LIST_INDUCT_TAC THEN REWRITE_TAC[sorted] THENL [
     SIMP_TAC[perm_nil2];
     SIMP_TAC[perm_nil];
     ALL_TAC
   ] THEN
     

   
let perm_length = prove
  (`!a (b:(A)list). perm a b ==> length a = length b`,
   REWRITE_TAC[perm] THEN 
     LIST_INDUCT_TAC THENL [
       LIST_INDUCT_TAC THEN REWRITE_TAC[count; length] THENL [
	 DISCH_THEN (MP_TAC o SPEC `h:A`) THEN ARITH_TAC;
	 ALL_TAC
       ] THEN
	 GEN_TAC THEN SPEC_TAC (`h:A`, `h:A`) THEN SPEC_TAC (`b:(A)list`, `s:(A)list`) THEN
	 LIST_INDUCT_TAC THEN REWRITE_TAC[count; length] THEN REPEAT STRIP_TAC THENL [
	   FIRST_X_ASSUM (MP_TAC o SPEC `h:A`) THEN ARITH_TAC;
	   ALL_TAC
	 ] THEN


     REPEAT LIST_INDUCT_TAC THEN REWRITE_TAC[count; length] THEN REPEAT STRIP_TAC THENL [

       FIRST_X_ASSUM (MP_TAC o SPEC `h:A`) THEN ARITH_TAC;
       ALL_TAC
     ] THEN
     




let sorted_alt = prove
  (`!s. sorted s <=> 
     (!i j. i <= j /\ j < LENGTH s ==> EL i s <= EL j s)`,
   LIST_INDUCT_TAC THENL [
     REWRITE_TAC[sorted; LENGTH; ARITH; LT];
     ALL_TAC
   ] THEN
     ASM_REWRITE_TAC[sorted_cons; LENGTH; EL_CONS] THEN 
     EQ_TAC THEN REPEAT STRIP_TAC THENL [
       ASM_CASES_TAC `i = 0` THEN ASM_CASES_TAC `j = 0` THEN ASM_REWRITE_TAC[LE_REFL] THENL [
	 FIRST_X_ASSUM MATCH_MP_TAC THEN
	   MATCH_MP_TAC MEM_EL THEN ASM_ARITH_TAC;
	 ASM_ARITH_TAC;
	 ALL_TAC
       ] THEN
	 FIRST_X_ASSUM MATCH_MP_TAC THEN
	 REPLICATE_TAC 4 (POP_ASSUM MP_TAC) THEN ARITH_TAC;
       FIRST_X_ASSUM (MP_TAC o SPECL[`SUC i`; `SUC j`]) THEN
	 ASM_REWRITE_TAC[LE_SUC; LT_SUC; NOT_SUC; SUC_SUB1];
       ALL_TAC
     ] THEN
     POP_ASSUM MP_TAC THEN REWRITE_TAC[MEM_EXISTS_EL] THEN STRIP_TAC THEN
     FIRST_X_ASSUM (MP_TAC o SPECL[`0`; `SUC i`]) THEN
     ASM_REWRITE_TAC[LT_SUC; LE_0; NOT_SUC; SUC_SUB1]);;

let sorted_alt = prove
  (`!s. sorted s <=>
     (!i j. i <= j /\ j < LENGTH s ==> EL i s <= EL j s)`,
   LIST_INDUCT_TAC THENL [
     REWRITE_TAC[sorted; LENGTH; ARITH; LT];
     ALL_TAC
   ] THEN
     POP_ASSUM MP_TAC THEN
     DISJ_CASES_TAC (ISPEC `t:(num)list` list_CASES) THENL [
       ASM_REWRITE_TAC[sorted; LENGTH; LT] THEN
	 REPEAT STRIP_TAC THEN
	 SUBGOAL_THEN `i = 0` ASSUME_TAC THENL [ ASM_ARITH_TAC; ALL_TAC ] THEN
	 ASM_REWRITE_TAC[EL; HD; LE_REFL];
       ALL_TAC
     ] THEN
     POP_ASSUM STRIP_ASSUME_TAC THEN
     ASM_SIMP_TAC[sorted] THEN DISCH_THEN (K ALL_TAC) THEN
     ALL_TAC);;

let sorted0 = prove
  (`sorted [] = T`,
   REWRITE_TAC[sorted_alt; LENGTH; LT]);;

let sorted1 = prove
  (`!x. sorted [x] = T`,
   REWRITE_TAC[sorted_alt; LENGTH; LT] THEN
     REPEAT STRIP_TAC THEN
     SUBGOAL_THEN `i = 0` ASSUME_TAC THENL [ ASM_ARITH_TAC; ALL_TAC ] THEN
      ASM_REWRITE_TAC[EL; HD; LE_REFL]);;
