let take = define `take n [] = [] 
  /\ take 0 (CONS h t) = [] 
  /\ take (SUC n) (CONS h t) = CONS h (take n t)`;;

let take_pre = prove(`!n. take n (CONS h t) = if n > 0 then CONS h (take (PRE n) t) else []`,
		     INDUCT_TAC THEN ASM_REWRITE_TAC[take; GT; LT; PRE] THEN ARITH_TAC);;

let drop = define `drop n [] = [] 
  /\ drop n (CONS h t) = if n > 0 then drop (PRE n) t else (CONS h t)`;;

let rotate = new_definition `rotate n s = APPEND (drop n s) (take n s)`;;
let rotr = new_definition `rotr n s = rotate (LENGTH s - n) s`;;



let take_ths = (fst o chop_list 2 o CONJUNCTS) take @ [take_pre];;
let defs, eval_take = build_eval take_ths;;
let defs, eval_drop = build_eval [drop];;
let defs, eval_append = build_eval [APPEND];;
let defs, eval_length = build_eval [LENGTH];;
let eval_rot = build_eval true [rotate];;
let eval_rotr = build_eval true [rotr];;

eval_take [`2`; `[1;2]`];;
eval_drop [`3`; `[1;2;3;4]`];;
eval_append [`[1;2]`; `[3;4]`];;
eval_rot [`1`; `[1;2;3;4]`];;
eval_rotr [`1`; `[1;2;3;4]`];;

(*************************)

build_app_table();;
let or_th = TAUT `(T \/ P <=> T) /\ (F \/ P <=> P)`;;
build_eval [or_th];;

let defs, op1 = build_eval [MEM];;

let mem2 = prove(`(MEM (x:A) [] <=> F) /\ (MEM x (CONS h t) = if x = h then T else MEM x t)`,
		   REWRITE_TAC[MEM] THEN COND_CASES_TAC THEN REWRITE_TAC[]);;
let defs, op2 = build_eval [mem2];;

(* 0.270 *)
test 1000 op1 [`3`; `[1; 3]`];;
(* 0.319 *)
test 1000 op2 [`3`; `[1; 3]`];;

(* 0.134 *)
test 1000 op1 [`3`; `[1]`];;
(* 0.210 *)
test 1000 op2 [`3`; `[1]`];;

(*********************************)

split_list;;
